/** * Created by jbmar on 30/04/2017. */const Helper = require('../core/Helpers');const UserModel = require('../models/UserModel');const express = require('express');const fs = require('fs');const uniqid = require('uniqid');const makeDir = require('make-dir');const thumb = require('node-thumbnail').thumb;const multer = require('multer');const path = require('path');const Storage = multer.diskStorage({    destination: function (req, file, callback) {        callback(null, "./public/profils/" + req.session.user.id);    },    filename: function (req, file, callback) {        callback(null, file.fieldname + "_" + Date.now() + "_" + file.originalname);    }});const upload = multer({    storage: Storage,    fileFilter:(req, file, cb) => {        if (!file.originalname.match(/\.(jpg|jpeg|png|gif)$/)) {            return cb(new Error('Only image files are allowed!'));        } else {            cb(null, true);        }    } }).single("photos-profil"); //Field name and max countclass AccountController {    constructor() {        if (!app) {            console.error('Error! Exiting... You must provide the Express instance to controllers.');            process.exit(1);        }        this.router = express.Router();        this.registerRoutes();        app.use('/', this.router);    }    registerRoutes() {        this.accountRoute();        this.accountPostRoute();    }    accountRoute() {        this.router.get('/account', (req, res) => {            if (req.session.start) {                makeDir('./public/profils/' + req.session.user.id);                UserModel.getPhotoProfil(req.session.user.id)                    .then((status) => {                        if (status !== false) {                            req.session.photosUsers = new Object();                            for (let i = 0; i < status.length; i++){                                req.session.photosUsers[i] = status[i];                            }                            res.render('./views/account/accountContent.pug', {                                title: 'Mon compte !!!'                            });                        }                    }).catch((err) => { if (err) { console.error(err); } });            } else {                res.redirect('../accueil');            }        });    }    accountPostRoute() {        this.router.post("/account/Upload", (req, res) => {            upload(req, res, (err) => {                if (err) {                    console.error(err);                    Helper.sendResponseToClient("Something went wrong!", 1, res);                } else {                    let validImage = ["image/gif", "image/jpeg", "image/png"];                    if (validImage.indexOf(req.file.mimetype) >= 0) {                        if (req.file.size <= 5000000) {                            const src_photo = req.file.destination.replace('./public', '') + '/' + req.file.filename;                            const response = {                                'mess': "La photo est enregistrÃ©e!",                                'srcPhoto': src_photo                            };                            const data = {                                'id_user': req.session.user.id,                                'src_photo': src_photo                            }                            UserModel.addPhotoProfil(data)                                .then((status) => {                                    Helper.sendResponseToClient(response , 0, res);                                }).catch((err) => { if (err) { console.error(err); } });                        } else {                            Helper.sendResponseToClient("L'image est trop volumineuse ! (max: 5Mo)", 1, res);                        }                    } else {                        //remove file ? ou trouver un moyen de ne pas l'accepter sans faire afficher d'err dans la console                        Helper.sendResponseToClient("Le fichier n'est un jpg, png, ou gif !", 1, res);                    }                }            });        });    }}module.exports = AccountController;